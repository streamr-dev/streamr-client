name: Lint, Unit, Integration Tests
env:
  CI: true
  DEBUG_COLORS: true
  DEBUG: "Streamr*"
on:
  push:
    tags:
      - "*"
    branches:
      - master
  pull_request:
    branches:
      - "*"
  schedule:
    # run every day at 00:00
    - cron: "0 0 * * *"

jobs:
  build:
    name: Run build using Node 14.x
    runs-on: ubuntu-latest
    env:
      BUNDLE_ANALYSIS: true
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - name: npm ci
        run: npm ci
      - name: npm run build
        run: npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: build
          path: dist

  lint:
    name: Run linter using Node 14.x
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - name: npm ci
        run: npm ci
      - name: npm run eslint
        run: npm run eslint
      - name: test-types
        run: npm run test-types

  test:
    name: Test Unit using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x]
    env:
      TEST_REPEATS: 5
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci
        run: npm ci
      - name: test-unit
        timeout-minutes: 7
        run: npm run test-unit

  integration:
    name: ${{ matrix.test-name }} ${{ matrix.websocket-url.name }} using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [12.x, 14.x]
        test-name: [
            "test-integration-no-resend",
            "test-integration-resend",
            "test-integration-dataunions",
        ]
        websocket-url:
            - name: "default"
              url:  ""
            - name: "storage-node-only"
              url:  "ws://localhost:8890/api/v1/ws"

        exclude:
          # no need to test different ws urls for dataunion tests
          - test-name: "test-integration-dataunions"
            websocket-url:
                - name: "storage-node-only"
                - url:  "ws://localhost:8890/api/v1/ws"
    env:
      TEST_NAME: ${{ matrix.test-name }}
      WEBSOCKET_URL: ${{ matrix.websocket-url.url}}
      TEST_REPEATS: 2

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci
        run: npm ci
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "mysql redis engine-and-editor cassandra parity-node0 parity-sidechain-node0 bridge broker-node-storage-1 nginx smtp"
      - name: Run Test
        run: npm run $TEST_NAME

  flakey:
    name: Flakey Tests using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [12.x, 14.x]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm ci
        run: npm ci
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "mysql redis engine-and-editor cassandra parity-node0 parity-sidechain-node0 bridge broker-node-storage-1 nginx smtp"
      - uses: nick-invision/retry@v2
        name: Run Test
        with:
          max_attempts: 2
          timeout_minutes: 15
          retry_on: error
          command: npm run test-flakey || echo "::warning::Flakey Tests Failed"

  test-exports:
    name: Test Exports using Node 14.x
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - name: npm ci
        run: npm ci
      - name: npm run test-exports
        run: npm run test-exports

  browser:
    name: Test Browser using Node 14.x
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - name: npm ci
        run: npm ci
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "mysql redis engine-and-editor cassandra parity-node0 parity-sidechain-node0 bridge broker-node-storage-1 nginx smtp"

      - uses: nick-invision/retry@v2
        name: Run Test
        with:
          max_attempts: 3
          timeout_minutes: 3
          retry_on: error
          command: npm run test-browser

  benchmarks:
    name: Test Benchmark using Node ${{ matrix.node-version }}
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "mysql redis engine-and-editor cassandra parity-node0 parity-sidechain-node0 bridge broker-node-storage-1 nginx smtp"
      - name: npm ci
        run: npm ci
      - name: benchmarks
        run: npm run benchmarks > benchmarks.txt
      - uses: actions/upload-artifact@v2
        with:
          name: benchmarks
          path: benchmarks.txt

  streamr-client-testing-tool:
    name: ${{ matrix.config-name }} ${{ matrix.test-name }}
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        test-name:
          - stream-cleartext-unsigned
          - stream-cleartext-signed
          - stream-encrypted-shared-signed
          - stream-encrypted-shared-rotating-signed
          - stream-encrypted-exchanged-rotating-signed
        config-name:
          - default
          - js-only
          - java-only
          - realtime-only
          - js-realtime-only
          - java-realtime-only
    env:
      NUM_MESSAGES: 20
      TEST_NAME: ${{ matrix.test-name }}
      CONFIG_NAME: ${{ matrix.config-name }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"
      - uses: actions/download-artifact@v2
        with:
          name: build
          path: dist
      - name: Start Streamr Docker Stack
        uses: streamr-dev/streamr-docker-dev-action@v1.0.0-alpha.3
        with:
          services-to-start: "mysql redis engine-and-editor cassandra parity-node0 parity-sidechain-node0 bridge broker-node-storage-1 nginx smtp"
      - name: npm ci
        run: npm ci
      - name: npm link
        run: npm link
      - uses: actions/checkout@v2
        with:
          repository: streamr-dev/streamr-client-testing
          path: streamr-client-testing
      - uses: actions/setup-java@v1
        with:
          java-version: '8'
      - name: setup-client-testing
        working-directory: streamr-client-testing
        run: |
          ## npm install is used because package-lock.json could be from a previous client version.
          npm install
          npm link streamr-client
          ./gradlew fatjar
      - name: run-client-testing
        timeout-minutes: 10
        working-directory: streamr-client-testing
        run: java -jar build/libs/client_testing-1.0-SNAPSHOT.jar -s $TEST_NAME -c config/$CONFIG_NAME.conf -n $NUM_MESSAGES
